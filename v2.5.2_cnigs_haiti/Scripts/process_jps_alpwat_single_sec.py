########################################################################################################
# LICENSE
# Copyright (C) 2025 - INPE - NATIONAL INSTITUTE FOR SPACE RESEARCH - BRAZIL
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU 
# General Public License as published by the Free Software Foundation, either version 3 of the License, 
# or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without 
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
# Public License for more details.
# You should have received a copy of the GNU General Public License along with this program. 
# If not, see http://www.gnu.org/licenses/.
#######################################################################################################
__author__ = "Diego Souza"
__copyright__ = "Copyright (C) 2025 - INPE - NATIONAL INSTITUTE FOR SPACE RESEARCH - BRAZIL"
__credits__ = ["Diego Souza"]
__license__ = "GPL"
__version__ = "2.5.2"
__maintainer__ = "Diego Souza"
__email__ = "diego.souza@inpe.br"
__status__ = "Production"
#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------
# Required modules
#--------------------------------
#to run in a pure text terminal:
import matplotlib
#matplotlib.use('Agg')
#--------------------------------
import numpy as np                                           # Import the Numpy package
import os 									                 # Miscellaneous operating system interfaces
from os.path import dirname, abspath                         # Return a normalized absolutized version of the pathname path 
import sys                                                   # Import the "system specific parameters and functions" module
import matplotlib.colors                                     # Matplotlib colors
import cartopy, cartopy.crs as ccrs                          # Plot maps
import cartopy.io.shapereader as shpreader                   # Import shapefiles
import matplotlib.pyplot as plt                              # Plotting library
import time as t                                             # Time access and conversion
from matplotlib.image import imread                          # Read an image from a file into an array
from cartopy.feature.nightshade import Nightshade            # Draws a polygon where there is no sunlight for the given datetime.
from html_update import update                               # Update the HTML animation 
from mpl_toolkits.axes_grid1.inset_locator import inset_axes # Add a child inset axes to this existing axes.
from osgeo import gdal, osr, ogr                             # Import GDAL
from pyhdf.SD import SD, SDC                                 # Import the HDF library
from datetime import datetime, timedelta                     # Library to convert julian day to dd-mm-yyyy
# Ignore possible warnings
import warnings
warnings.filterwarnings("ignore")
#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------

def getGeoTransform(extent, nlines, ncols):
    resx = (extent[2] - extent[0]) / ncols
    resy = (extent[3] - extent[1]) / nlines
    return [extent[0], resx, 0, extent[3] , 0, -resy]

#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------

# Start the time counter
print('Script started.')
start_time = t.time()  

# SHOWCast directory:
main_dir = dirname(dirname(abspath(__file__)))

# Reading the file:
path = sys.argv[1][:-4]
path_log = sys.argv[1]
file = SD(path, SDC.READ)

# Get the desired level
level = sys.argv[1][-3:]

print(level) 

# Reading the dataset
if(level == '850'):
    sds_obj = file.select('ALPW_1000_0850_hPa_Mean') 
    data = sds_obj.get() 
elif(level == '700'):
    sds_obj = file.select('ALPW_0850_0700_hPa_Mean') 
    data = sds_obj.get()
elif(level == '500'):
    sds_obj = file.select('ALPW_0700_0500_hPa_Mean') 
    data = sds_obj.get() 
elif(level == '300'):
    sds_obj = file.select('ALPW_0500_0300_hPa_Mean') 
    data = sds_obj.get() 


# Parameters
product = "ALP" + level
nomenclature = "JPS_ALP" + level
satellite = "JPS"
product = "ALP" + level
storage = product + "_STR"
colors = ["#000000", "#393939", "#818181", "#bec4ba", "#339831", "#056c47", "#1360a7", "#1b91fc", "#0ca7f0", "#00d6ef", "#5c92d8", "#8954d1", "#922fed", "#8b07a0", "#8d0069", "#8c0002", "#cc0000", "#e22a00", "#f56200", "#d25d00", "#9b3900", "#dc9e00", "#ffe300", "#fffa08", "#dd928c", "#e5a3a6"]
cmap = matplotlib.colors.LinearSegmentedColormap.from_list("", colors)
vmin = 0
vmax = 32
thick_interval = 2
prod_title = "Advected Layered Precipitable Water"

#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------

# Get only the file name
file_name = os.path.basename(path)

# Reading the time and date from the file name
date = file_name[0:13]
year = date[0:4]
jday = date[4:7]
hour = date[7:9]
minute = date[9:11]
seconds = date[11:13]
#millis = date[13:15]

# Formatting the date
date_formated = (datetime.strptime(year + jday, '%Y%j').date().strftime('%Y-%m-%d')) + ' ' +  hour + ':' + minute + ':' + seconds + ' UTC'
date_file = date

#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------

# Getting the file creation time: https://stackoverflow.com/questions/31003968/fields-not-found-when-using-pyhdf

from pyhdf.HDF import *
from pyhdf.V   import *
from pyhdf.VS  import *
from pyhdf.SD  import *

def describevg(refnum):
    # Describe the vgroup with the given refnum.
    # Open vgroup in read mode.
    vg = v.attach(refnum)

    # Read the contents of the vgroup.
    members = vg.tagrefs()

    # Display info about each member.
    index = -1
    for tag, ref in members:
        index += 1
        if (index == 15):
            # Vdata tag
            if tag == HC.DFTAG_VH:
                vd = vs.attach(ref)
                nrecs, intmode, fields, size, name = vd.inquire()
                global created
                created = str(vd.read()[0])
                created = created.replace('[' ,'')
                created = created.replace(']' ,'')
                created = created.replace('JAN' ,'01')
                created = created.replace('FEB' ,'02')
                created = created.replace('MAR' ,'03')
                created = created.replace('APR' ,'04')
                created = created.replace('MAY' ,'05')
                created = created.replace('JUN' ,'06')
                created = created.replace('JUL' ,'07')
                created = created.replace('AUG' ,'08')
                created = created.replace('SEP' ,'09')
                created = created.replace('OCT' ,'10')
                created = created.replace('NOV' ,'11')
                created = created.replace('DEC' ,'12')
                created = created[1:-1]
                
                vd.detach()
    # Close vgroup
    vg.detach()

# Open HDF file in readonly mode.
filename = path
hdf = HDF(filename)

# Initialize the SD, V and VS interfaces on the file.
sd = SD(filename)
vs = hdf.vstart()
v  = hdf.vgstart()

# Scan all vgroups in the file.
ref = -1
while 1:
    try:
        ref = v.getid(ref)

    except:    # no more vgroup
        break
    if (ref == 4):
        describevg(ref)

#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------

# Assigning Latitudes 

lat = [71.24783,
71.20157,
71.1552,
71.10872,
71.06213,
71.01543,
70.96862,
70.9217,
70.87466,
70.82752,
70.78027,
70.73289,
70.68541,
70.63782,
70.59011,
70.54229,
70.49436,
70.44631,
70.39816,
70.34988,
70.30149,
70.25299,
70.20437,
70.15564,
70.10679,
70.05783,
70.00875,
69.95956,
69.91025,
69.86082,
69.81128,
69.76162,
69.71184,
69.66195,
69.61193,
69.56181,
69.51156,
69.46119,
69.41071,
69.36011,
69.30939,
69.25854,
69.20758,
69.1565,
69.1053,
69.05399,
69.00254,
68.95098,
68.8993,
68.8475,
68.79558,
68.74353,
68.69136,
68.63908,
68.58666,
68.53413,
68.48147,
68.42869,
68.37579,
68.32276,
68.26961,
68.21633,
68.16293,
68.10941,
68.05576,
68.00199,
67.94809,
67.89407,
67.83992,
67.78564,
67.73124,
67.67671,
67.62206,
67.56728,
67.51237,
67.45734,
67.40217,
67.34688,
67.29146,
67.23591,
67.18023,
67.12443,
67.06849,
67.01243,
66.95623,
66.89991,
66.84345,
66.78687,
66.73016,
66.67331,
66.61633,
66.55923,
66.50198,
66.44462,
66.38711,
66.32948,
66.27171,
66.21381,
66.15577,
66.0976,
66.0393,
65.98087,
65.9223,
65.86359,
65.80476,
65.74578,
65.68668,
65.62743,
65.56805,
65.50854,
65.44889,
65.38911,
65.32918,
65.26912,
65.20892,
65.14859,
65.08812,
65.02751,
64.96677,
64.90588,
64.84486,
64.78369,
64.72239,
64.66095,
64.59937,
64.53765,
64.47579,
64.41379,
64.35165,
64.28937,
64.22694,
64.16438,
64.10168,
64.03883,
63.97584,
63.91271,
63.84944,
63.78602,
63.72247,
63.65876,
63.59492,
63.53093,
63.4668,
63.40252,
63.3381,
63.27354,
63.20883,
63.14397,
63.07897,
63.01382,
62.94853,
62.88309,
62.81751,
62.75178,
62.68591,
62.61988,
62.55371,
62.48739,
62.42092,
62.35431,
62.28754,
62.22063,
62.15358,
62.08636,
62.01901,
61.9515,
61.88384,
61.81604,
61.74808,
61.67997,
61.61171,
61.5433,
61.47475,
61.40604,
61.33717,
61.26816,
61.19899,
61.12967,
61.0602,
60.99058,
60.9208,
60.85088,
60.78079,
60.71056,
60.64016,
60.56962,
60.49892,
60.42807,
60.35706,
60.2859,
60.21458,
60.14311,
60.07148,
59.99969,
59.92775,
59.85566,
59.7834,
59.71099,
59.63842,
59.5657,
59.49281,
59.41977,
59.34658,
59.27322,
59.1997,
59.12603,
59.0522,
58.97821,
58.90406,
58.82975,
58.75528,
58.68065,
58.60586,
58.53091,
58.4558,
58.38053,
58.3051,
58.2295,
58.15375,
58.07784,
58.00175,
57.92552,
57.84911,
57.77255,
57.69582,
57.61893,
57.54188,
57.46466,
57.38728,
57.30974,
57.23203,
57.15416,
57.07613,
56.99792,
56.91956,
56.84103,
56.76234,
56.68348,
56.60445,
56.52526,
56.4459,
56.36638,
56.28669,
56.20683,
56.12681,
56.04662,
55.96626,
55.88574,
55.80505,
55.72419,
55.64317,
55.56197,
55.48061,
55.39908,
55.31738,
55.23551,
55.15347,
55.07127,
54.98889,
54.90635,
54.82363,
54.74075,
54.65769,
54.57447,
54.49107,
54.40751,
54.32378,
54.23987,
54.15579,
54.07154,
53.98712,
53.90253,
53.81777,
53.73283,
53.64773,
53.56245,
53.477,
53.39138,
53.30558,
53.21961,
53.13347,
53.04715,
52.96067,
52.874,
52.78717,
52.70016,
52.61298,
52.52562,
52.43809,
52.35039,
52.26251,
52.17446,
52.08623,
51.99783,
51.90925,
51.8205,
51.73157,
51.64246,
51.55319,
51.46373,
51.3741,
51.2843,
51.19432,
51.10416,
51.01382,
50.92331,
50.83263,
50.74176,
50.65072,
50.55951,
50.46811,
50.37654,
50.2848,
50.19287,
50.10077,
50.00849,
49.91603,
49.8234,
49.73059,
49.6376,
49.54443,
49.45108,
49.35756,
49.26385,
49.16998,
49.07592,
48.98168,
48.88726,
48.79267,
48.6979,
48.60294,
48.50781,
48.4125,
48.31701,
48.22135,
48.1255,
48.02947,
47.93327,
47.83688,
47.74032,
47.64357,
47.54665,
47.44955,
47.35227,
47.25481,
47.15717,
47.05934,
46.96134,
46.86316,
46.7648,
46.66626,
46.56754,
46.46864,
46.36956,
46.2703,
46.17086,
46.07124,
45.97144,
45.87145,
45.77129,
45.67095,
45.57043,
45.46973,
45.36884,
45.26778,
45.16654,
45.06512,
44.96351,
44.86173,
44.75977,
44.65762,
44.55529,
44.45279,
44.35011,
44.24724,
44.1442,
44.04097,
43.93756,
43.83398,
43.73021,
43.62627,
43.52214,
43.41784,
43.31335,
43.20868,
43.10384,
42.99881,
42.8936,
42.78822,
42.68266,
42.57691,
42.47099,
42.36488,
42.2586,
42.15214,
42.04549,
41.93867,
41.83167,
41.72449,
41.61713,
41.50959,
41.40188,
41.29398,
41.18591,
41.07765,
40.96922,
40.86061,
40.75182,
40.64286,
40.53371,
40.42439,
40.31488,
40.20521,
40.09535,
39.98532,
39.8751,
39.76471,
39.65415,
39.5434,
39.43248,
39.32138,
39.21011,
39.09866,
38.98703,
38.87523,
38.76325,
38.65109,
38.53876,
38.42625,
38.31357,
38.20071,
38.08768,
37.97447,
37.86109,
37.74753,
37.6338,
37.51989,
37.40581,
37.29155,
37.17712,
37.06252,
36.94775,
36.83279,
36.71767,
36.60238,
36.48691,
36.37127,
36.25546,
36.13948,
36.02332,
35.90699,
35.79049,
35.67382,
35.55698,
35.43998,
35.32279,
35.20544,
35.08792,
34.97023,
34.85237,
34.73434,
34.61614,
34.49778,
34.37924,
34.26054,
34.14167,
34.02263,
33.90343,
33.78405,
33.66452,
33.54481,
33.42494,
33.3049,
33.1847,
33.06433,
32.9438,
32.8231,
32.70224,
32.58122,
32.46003,
32.33868,
32.21716,
32.09549,
31.97365,
31.85165,
31.72948,
31.60716,
31.48467,
31.36203,
31.23922,
31.11626,
30.99313,
30.86985,
30.7464,
30.6228,
30.49904,
30.37512,
30.25105,
30.12682,
30.00243,
29.87789,
29.75319,
29.62833,
29.50332,
29.37815,
29.25284,
29.12736,
29.00174,
28.87596,
28.75003,
28.62394,
28.49771,
28.37132,
28.24479,
28.1181,
27.99126,
27.86427,
27.73714,
27.60986,
27.48242,
27.35485,
27.22712,
27.09925,
26.97123,
26.84306,
26.71475,
26.58629,
26.4577,
26.32895,
26.20007,
26.07104,
25.94186,
25.81255,
25.68309,
25.5535,
25.42376,
25.29389,
25.16387,
25.03372,
24.90343,
24.77299,
24.64243,
24.51172,
24.38089,
24.24991,
24.1188,
23.98755,
23.85618,
23.72466,
23.59302,
23.46124,
23.32933,
23.19729,
23.06512,
22.93282,
22.80039,
22.66784,
22.53515,
22.40233,
22.26939,
22.13632,
22.00313,
21.86981,
21.73637,
21.6028,
21.46911,
21.3353,
21.20136,
21.0673,
20.93312,
20.79883,
20.66441,
20.52987,
20.39521,
20.26044,
20.12555,
19.99054,
19.85542,
19.72018,
19.58483,
19.44936,
19.31378,
19.17809,
19.04229,
18.90637,
18.77034,
18.63421,
18.49796,
18.36161,
18.22515,
18.08858,
17.95191,
17.81513,
17.67824,
17.54125,
17.40416,
17.26696,
17.12966,
16.99226,
16.85476,
16.71716,
16.57946,
16.44166,
16.30377,
16.16577,
16.02768,
15.8895,
15.75122,
15.61284,
15.47437,
15.33581,
15.19716,
15.05842,
14.91958,
14.78066,
14.64164,
14.50254,
14.36335,
14.22408,
14.08472,
13.94527,
13.80574,
13.66613,
13.52643,
13.38665,
13.24679,
13.10685,
12.96683,
12.82673,
12.68655,
12.5463,
12.40597,
12.26556,
12.12508,
11.98452,
11.84389,
11.70319,
11.56242,
11.42158,
11.28066,
11.13968,
10.99863,
10.85751,
10.71633,
10.57508,
10.43376,
10.29238,
10.15094,
10.00943,
9.86786,
9.72623,
9.58454,
9.4428,
9.30099,
9.15913,
9.01721,
8.87523,
8.7332,
8.59111,
8.44897,
8.30678,
8.16454,
8.02225,
7.8799,
7.73751,
7.59507,
7.45258,
7.31005,
7.16747,
7.02485,
6.88218,
6.73947,
6.59672,
6.45392,
6.31109,
6.16822,
6.0253,
5.88236,
5.73937,
5.59635,
5.45329,
5.3102,
5.16707,
5.02392,
4.88073,
4.73751,
4.59426,
4.45098,
4.30768,
4.16435,
4.02099,
3.87761,
3.7342,
3.59077,
3.44731,
3.30384,
3.16034,
3.01683,
2.87329,
2.72974,
2.58617,
2.44258,
2.29898,
2.15536,
2.01173,
1.86809,
1.72444,
1.58077,
1.4371,
1.29341,
1.14972,
1.00602,
0.86232,
0.71861,
0.57489,
0.43117,
0.28745,
0.14372,
0,
-0.14372,
-0.28745,
-0.43117,
-0.57489,
-0.71861,
-0.86232,
-1.00602,
-1.14972,
-1.29341,
-1.4371,
-1.58077,
-1.72444,
-1.86809,
-2.01173,
-2.15536,
-2.29898,
-2.44258,
-2.58617,
-2.72974,
-2.87329,
-3.01683,
-3.16034,
-3.30384,
-3.44731,
-3.59077,
-3.7342,
-3.87761,
-4.02099,
-4.16435,
-4.30768,
-4.45098,
-4.59426,
-4.73751,
-4.88073,
-5.02392,
-5.16707,
-5.3102,
-5.45329,
-5.59635,
-5.73937,
-5.88236,
-6.0253,
-6.16822,
-6.31109,
-6.45392,
-6.59672,
-6.73947,
-6.88218,
-7.02485,
-7.16747,
-7.31005,
-7.45258,
-7.59507,
-7.73751,
-7.8799,
-8.02225,
-8.16454,
-8.30678,
-8.44897,
-8.59111,
-8.7332,
-8.87523,
-9.01721,
-9.15913,
-9.30099,
-9.4428,
-9.58454,
-9.72623,
-9.86786,
-10.00943,
-10.15094,
-10.29238,
-10.43376,
-10.57508,
-10.71633,
-10.85751,
-10.99863,
-11.13968,
-11.28066,
-11.42158,
-11.56242,
-11.70319,
-11.84389,
-11.98452,
-12.12508,
-12.26556,
-12.40597,
-12.5463,
-12.68655,
-12.82673,
-12.96683,
-13.10685,
-13.24679,
-13.38665,
-13.52643,
-13.66613,
-13.80574,
-13.94527,
-14.08472,
-14.22408,
-14.36335,
-14.50254,
-14.64164,
-14.78066,
-14.91958,
-15.05842,
-15.19716,
-15.33581,
-15.47437,
-15.61284,
-15.75122,
-15.8895,
-16.02768,
-16.16577,
-16.30377,
-16.44166,
-16.57946,
-16.71716,
-16.85476,
-16.99226,
-17.12966,
-17.26696,
-17.40416,
-17.54125,
-17.67824,
-17.81513,
-17.95191,
-18.08858,
-18.22515,
-18.36161,
-18.49796,
-18.63421,
-18.77034,
-18.90637,
-19.04229,
-19.17809,
-19.31378,
-19.44936,
-19.58483,
-19.72018,
-19.85542,
-19.99054,
-20.12555,
-20.26044,
-20.39521,
-20.52987,
-20.66441,
-20.79883,
-20.93312,
-21.0673,
-21.20136,
-21.3353,
-21.46911,
-21.6028,
-21.73637,
-21.86981,
-22.00313,
-22.13632,
-22.26939,
-22.40233,
-22.53515,
-22.66784,
-22.80039,
-22.93282,
-23.06512,
-23.19729,
-23.32933,
-23.46124,
-23.59302,
-23.72466,
-23.85618,
-23.98755,
-24.1188,
-24.24991,
-24.38089,
-24.51172,
-24.64243,
-24.77299,
-24.90343,
-25.03372,
-25.16387,
-25.29389,
-25.42376,
-25.5535,
-25.68309,
-25.81255,
-25.94186,
-26.07104,
-26.20007,
-26.32895,
-26.4577,
-26.58629,
-26.71475,
-26.84306,
-26.97123,
-27.09925,
-27.22712,
-27.35485,
-27.48242,
-27.60986,
-27.73714,
-27.86427,
-27.99126,
-28.1181,
-28.24479,
-28.37132,
-28.49771,
-28.62394,
-28.75003,
-28.87596,
-29.00174,
-29.12736,
-29.25284,
-29.37815,
-29.50332,
-29.62833,
-29.75319,
-29.87789,
-30.00243,
-30.12682,
-30.25105,
-30.37512,
-30.49904,
-30.6228,
-30.7464,
-30.86985,
-30.99313,
-31.11626,
-31.23922,
-31.36203,
-31.48467,
-31.60716,
-31.72948,
-31.85165,
-31.97365,
-32.09549,
-32.21716,
-32.33868,
-32.46003,
-32.58122,
-32.70224,
-32.8231,
-32.9438,
-33.06433,
-33.1847,
-33.3049,
-33.42494,
-33.54481,
-33.66452,
-33.78405,
-33.90343,
-34.02263,
-34.14167,
-34.26054,
-34.37924,
-34.49778,
-34.61614,
-34.73434,
-34.85237,
-34.97023,
-35.08792,
-35.20544,
-35.32279,
-35.43998,
-35.55698,
-35.67382,
-35.79049,
-35.90699,
-36.02332,
-36.13948,
-36.25546,
-36.37127,
-36.48691,
-36.60238,
-36.71767,
-36.83279,
-36.94775,
-37.06252,
-37.17712,
-37.29155,
-37.40581,
-37.51989,
-37.6338,
-37.74753,
-37.86109,
-37.97447,
-38.08768,
-38.20071,
-38.31357,
-38.42625,
-38.53876,
-38.65109,
-38.76325,
-38.87523,
-38.98703,
-39.09866,
-39.21011,
-39.32138,
-39.43248,
-39.5434,
-39.65415,
-39.76471,
-39.8751,
-39.98532,
-40.09535,
-40.20521,
-40.31488,
-40.42439,
-40.53371,
-40.64286,
-40.75182,
-40.86061,
-40.96922,
-41.07765,
-41.18591,
-41.29398,
-41.40188,
-41.50959,
-41.61713,
-41.72449,
-41.83167,
-41.93867,
-42.04549,
-42.15214,
-42.2586,
-42.36488,
-42.47099,
-42.57691,
-42.68266,
-42.78822,
-42.8936,
-42.99881,
-43.10384,
-43.20868,
-43.31335,
-43.41784,
-43.52214,
-43.62627,
-43.73021,
-43.83398,
-43.93756,
-44.04097,
-44.1442,
-44.24724,
-44.35011,
-44.45279,
-44.55529,
-44.65762,
-44.75977,
-44.86173,
-44.96351,
-45.06512,
-45.16654,
-45.26778,
-45.36884,
-45.46973,
-45.57043,
-45.67095,
-45.77129,
-45.87145,
-45.97144,
-46.07124,
-46.17086,
-46.2703,
-46.36956,
-46.46864,
-46.56754,
-46.66626,
-46.7648,
-46.86316,
-46.96134,
-47.05934,
-47.15717,
-47.25481,
-47.35227,
-47.44955,
-47.54665,
-47.64357,
-47.74032,
-47.83688,
-47.93327,
-48.02947,
-48.1255,
-48.22135,
-48.31701,
-48.4125,
-48.50781,
-48.60294,
-48.6979,
-48.79267,
-48.88726,
-48.98168,
-49.07592,
-49.16998,
-49.26385,
-49.35756,
-49.45108,
-49.54443,
-49.6376,
-49.73059,
-49.8234,
-49.91603,
-50.00849,
-50.10077,
-50.19287,
-50.2848,
-50.37654,
-50.46811,
-50.55951,
-50.65072,
-50.74176,
-50.83263,
-50.92331,
-51.01382,
-51.10416,
-51.19432,
-51.2843,
-51.3741,
-51.46373,
-51.55319,
-51.64246,
-51.73157,
-51.8205,
-51.90925,
-51.99783,
-52.08623,
-52.17446,
-52.26251,
-52.35039,
-52.43809,
-52.52562,
-52.61298,
-52.70016,
-52.78717,
-52.874,
-52.96067,
-53.04715,
-53.13347,
-53.21961,
-53.30558,
-53.39138,
-53.477,
-53.56245,
-53.64773,
-53.73283,
-53.81777,
-53.90253,
-53.98712,
-54.07154,
-54.15579,
-54.23987,
-54.32378,
-54.40751,
-54.49107,
-54.57447,
-54.65769,
-54.74075,
-54.82363,
-54.90635,
-54.98889,
-55.07127,
-55.15347,
-55.23551,
-55.31738,
-55.39908,
-55.48061,
-55.56197,
-55.64317,
-55.72419,
-55.80505,
-55.88574,
-55.96626,
-56.04662,
-56.12681,
-56.20683,
-56.28669,
-56.36638,
-56.4459,
-56.52526,
-56.60445,
-56.68348,
-56.76234,
-56.84103,
-56.91956,
-56.99792,
-57.07613,
-57.15416,
-57.23203,
-57.30974,
-57.38728,
-57.46466,
-57.54188,
-57.61893,
-57.69582,
-57.77255,
-57.84911,
-57.92552,
-58.00175,
-58.07784,
-58.15375,
-58.2295,
-58.3051,
-58.38053,
-58.4558,
-58.53091,
-58.60586,
-58.68065,
-58.75528,
-58.82975,
-58.90406,
-58.97821,
-59.0522,
-59.12603,
-59.1997,
-59.27322,
-59.34658,
-59.41977,
-59.49281,
-59.5657,
-59.63842,
-59.71099,
-59.7834,
-59.85566,
-59.92775,
-59.99969,
-60.07148,
-60.14311,
-60.21458,
-60.2859,
-60.35706,
-60.42807,
-60.49892,
-60.56962,
-60.64016,
-60.71056,
-60.78079,
-60.85088,
-60.9208,
-60.99058,
-61.0602,
-61.12967,
-61.19899,
-61.26816,
-61.33717,
-61.40604,
-61.47475,
-61.5433,
-61.61171,
-61.67997,
-61.74808,
-61.81604,
-61.88384,
-61.9515,
-62.01901,
-62.08636,
-62.15358,
-62.22063,
-62.28754,
-62.35431,
-62.42092,
-62.48739,
-62.55371,
-62.61988,
-62.68591,
-62.75178,
-62.81751,
-62.88309,
-62.94853,
-63.01382,
-63.07897,
-63.14397,
-63.20883,
-63.27354,
-63.3381,
-63.40252,
-63.4668,
-63.53093,
-63.59492,
-63.65876,
-63.72247,
-63.78602,
-63.84944,
-63.91271,
-63.97584,
-64.03883,
-64.10168,
-64.16438,
-64.22694,
-64.28937,
-64.35165,
-64.41379,
-64.47579,
-64.53765,
-64.59937,
-64.66095,
-64.72239,
-64.78369,
-64.84486,
-64.90588,
-64.96677,
-65.02751,
-65.08812,
-65.14859,
-65.20892,
-65.26912,
-65.32918,
-65.38911,
-65.44889,
-65.50854,
-65.56805,
-65.62743,
-65.68668,
-65.74578,
-65.80476,
-65.86359,
-65.9223,
-65.98087,
-66.0393,
-66.0976,
-66.15577,
-66.21381,
-66.27171,
-66.32948,
-66.38711,
-66.44462,
-66.50198,
-66.55923,
-66.61633,
-66.67331,
-66.73016,
-66.78687,
-66.84345,
-66.89991,
-66.95623,
-67.01243,
-67.06849,
-67.12443,
-67.18023,
-67.23591,
-67.29146,
-67.34688,
-67.40217,
-67.45734,
-67.51237,
-67.56728,
-67.62206,
-67.67671,
-67.73124,
-67.78564,
-67.83992,
-67.89407,
-67.94809,
-68.00199,
-68.05576,
-68.10941,
-68.16293,
-68.21633,
-68.26961,
-68.32276,
-68.37579,
-68.42869,
-68.48147,
-68.53413,
-68.58666,
-68.63908,
-68.69136,
-68.74353,
-68.79558,
-68.8475,
-68.8993,
-68.95098,
-69.00254,
-69.05399,
-69.1053,
-69.1565,
-69.20758,
-69.25854,
-69.30939,
-69.36011,
-69.41071,
-69.46119,
-69.51156,
-69.56181,
-69.61193,
-69.66195,
-69.71184,
-69.76162,
-69.81128,
-69.86082,
-69.91025,
-69.95956,
-70.00875,
-70.05783,
-70.10679,
-70.15564,
-70.20437,
-70.25299,
-70.30149,
-70.34988,
-70.39816,
-70.44631,
-70.49436,
-70.54229,
-70.59011,
-70.63782,
-70.68541,
-70.73289,
-70.78027,
-70.82752,
-70.87466,
-70.9217,
-70.96862,
-71.01543,
-71.06213,
-71.10872,
-71.1552,
-71.20157,
-71.24783]

lats = np.asarray(lat)

# Assigning Longitudes 

lon=[20.41588,
20.5596,
20.70333,
20.84705,
20.99077,
21.1345,
21.27822,
21.42195,
21.56567,
21.7094,
21.85312,
21.99685,
22.14057,
22.2843,
22.42802,
22.57175,
22.71547,
22.8592,
23.00292,
23.14665,
23.29037,
23.4341,
23.57782,
23.72155,
23.86527,
24.009,
24.15272,
24.29645,
24.44017,
24.58389,
24.72762,
24.87134,
25.01507,
25.15879,
25.30252,
25.44624,
25.58997,
25.73369,
25.87742,
26.02114,
26.16487,
26.30859,
26.45232,
26.59604,
26.73977,
26.88349,
27.02722,
27.17094,
27.31466,
27.45839,
27.60212,
27.74584,
27.88956,
28.03329,
28.17701,
28.32074,
28.46446,
28.60819,
28.75191,
28.89564,
29.03936,
29.18309,
29.32681,
29.47054,
29.61426,
29.75799,
29.90171,
30.04544,
30.18916,
30.33289,
30.47661,
30.62034,
30.76406,
30.90779,
31.05151,
31.19523,
31.33896,
31.48269,
31.62641,
31.77013,
31.91386,
32.05758,
32.20131,
32.34503,
32.48876,
32.63248,
32.77621,
32.91993,
33.06366,
33.20738,
33.35111,
33.49483,
33.63856,
33.78228,
33.92601,
34.06973,
34.21346,
34.35718,
34.5009,
34.64463,
34.78835,
34.93208,
35.07581,
35.21953,
35.36325,
35.50698,
35.6507,
35.79443,
35.93815,
36.08188,
36.2256,
36.36933,
36.51305,
36.65678,
36.8005,
36.94423,
37.08795,
37.23167,
37.3754,
37.51913,
37.66285,
37.80658,
37.9503,
38.09402,
38.23775,
38.38147,
38.5252,
38.66892,
38.81265,
38.95638,
39.1001,
39.24382,
39.38755,
39.53127,
39.675,
39.81872,
39.96245,
40.10617,
40.2499,
40.39362,
40.53735,
40.68107,
40.82479,
40.96852,
41.11224,
41.25597,
41.3997,
41.54342,
41.68715,
41.83087,
41.97459,
42.11832,
42.26204,
42.40577,
42.54949,
42.69322,
42.83694,
42.98067,
43.12439,
43.26812,
43.41184,
43.55556,
43.69929,
43.84302,
43.98674,
44.13047,
44.27419,
44.41792,
44.56164,
44.70536,
44.84909,
44.99281,
45.13654,
45.28027,
45.42399,
45.56771,
45.71144,
45.85516,
45.99889,
46.14261,
46.28634,
46.43006,
46.57379,
46.71751,
46.86124,
47.00496,
47.14869,
47.29241,
47.43613,
47.57986,
47.72359,
47.86731,
48.01104,
48.15476,
48.29848,
48.44221,
48.58593,
48.72966,
48.87338,
49.01711,
49.16084,
49.30456,
49.44828,
49.59201,
49.73573,
49.87946,
50.02318,
50.16691,
50.31063,
50.45436,
50.59808,
50.74181,
50.88553,
51.02925,
51.17298,
51.3167,
51.46043,
51.60416,
51.74788,
51.89161,
52.03533,
52.17905,
52.32278,
52.4665,
52.61023,
52.75395,
52.89768,
53.0414,
53.18513,
53.32885,
53.47258,
53.6163,
53.76003,
53.90375,
54.04748,
54.1912,
54.33493,
54.47865,
54.62238,
54.7661,
54.90982,
55.05355,
55.19727,
55.341,
55.48473,
55.62845,
55.77217,
55.9159,
56.05962,
56.20335,
56.34707,
56.4908,
56.63452,
56.77825,
56.92197,
57.0657,
57.20942,
57.35315,
57.49687,
57.64059,
57.78432,
57.92805,
58.07177,
58.2155,
58.35922,
58.50294,
58.64667,
58.79039,
58.93412,
59.07784,
59.22157,
59.3653,
59.50902,
59.65274,
59.79647,
59.94019,
60.08392,
60.22764,
60.37137,
60.51509,
60.65882,
60.80254,
60.94627,
61.08999,
61.23372,
61.37744,
61.52116,
61.66489,
61.80862,
61.95234,
62.09607,
62.23979,
62.38351,
62.52724,
62.67096,
62.81469,
62.95841,
63.10214,
63.24586,
63.38959,
63.53331,
63.67704,
63.82076,
63.96449,
64.10822,
64.25194,
64.39566,
64.53938,
64.68311,
64.82684,
64.97056,
65.11429,
65.25801,
65.40173,
65.54546,
65.68919,
65.83291,
65.97663,
66.12036,
66.26408,
66.40781,
66.55154,
66.69526,
66.83898,
66.9827,
67.12643,
67.27016,
67.41388,
67.55761,
67.70133,
67.84505,
67.98878,
68.13251,
68.27623,
68.41995,
68.56368,
68.70741,
68.85113,
68.99486,
69.13858,
69.2823,
69.42603,
69.56976,
69.71348,
69.8572,
70.00093,
70.14465,
70.28838,
70.43211,
70.57583,
70.71955,
70.86327,
71.007,
71.15073,
71.29445,
71.43818,
71.5819,
71.72562,
71.86935,
72.01308,
72.1568,
72.30052,
72.44425,
72.58797,
72.7317,
72.87543,
73.01915,
73.16287,
73.30659,
73.45033,
73.59405,
73.73777,
73.8815,
74.02522,
74.16895,
74.31267,
74.4564,
74.60012,
74.74384,
74.88757,
75.0313,
75.17502,
75.31875,
75.46247,
75.60619,
75.74992,
75.89365,
76.03737,
76.18109,
76.32482,
76.46854,
76.61227,
76.756,
76.89972,
77.04344,
77.18716,
77.33089,
77.47462,
77.61834,
77.76207,
77.90579,
78.04951,
78.19324,
78.33697,
78.48069,
78.62441,
78.76814,
78.91187,
79.05559,
79.19932,
79.34304,
79.48676,
79.63049,
79.77422,
79.91794,
80.06166,
80.20539,
80.34911,
80.49284,
80.63657,
80.78029,
80.92401,
81.06773,
81.21146,
81.35519,
81.49891,
81.64264,
81.78636,
81.93008,
82.07381,
82.21754,
82.36126,
82.50498,
82.64871,
82.79243,
82.93616,
83.07989,
83.22361,
83.36733,
83.51105,
83.65479,
83.79851,
83.94223,
84.08596,
84.22968,
84.37341,
84.51713,
84.66086,
84.80458,
84.9483,
85.09203,
85.23576,
85.37948,
85.52321,
85.66693,
85.81065,
85.95438,
86.09811,
86.24183,
86.38555,
86.52928,
86.673,
86.81673,
86.96046,
87.10418,
87.2479,
87.39162,
87.53535,
87.67908,
87.8228,
87.96653,
88.11025,
88.25397,
88.3977,
88.54143,
88.68515,
88.82887,
88.9726,
89.11633,
89.26005,
89.40378,
89.5475,
89.69122,
89.83495,
89.97868,
90.1224,
90.26612,
90.40985,
90.55357,
90.6973,
90.84102,
90.98475,
91.12847,
91.27219,
91.41592,
91.55965,
91.70337,
91.8471,
91.99082,
92.13454,
92.27827,
92.422,
92.56572,
92.70944,
92.85317,
92.99689,
93.14062,
93.28435,
93.42807,
93.57179,
93.71552,
93.85925,
94.00297,
94.14669,
94.29042,
94.43414,
94.57787,
94.72159,
94.86532,
95.00904,
95.15276,
95.29649,
95.44022,
95.58394,
95.72767,
95.87139,
96.01511,
96.15884,
96.30257,
96.44629,
96.59001,
96.73374,
96.87746,
97.02119,
97.16491,
97.30864,
97.45236,
97.59608,
97.73981,
97.88354,
98.02726,
98.17099,
98.31471,
98.45844,
98.60216,
98.74589,
98.88961,
99.03333,
99.17706,
99.32079,
99.46451,
99.60824,
99.75196,
99.89568,
100.03941,
100.18314,
100.32686,
100.47058,
100.61431,
100.75803,
100.90176,
101.04548,
101.18921,
101.33293,
101.47665,
101.62038,
101.76411,
101.90783,
102.05156,
102.19528,
102.339,
102.48273,
102.62646,
102.77018,
102.9139,
103.05763,
103.20135,
103.34508,
103.48881,
103.63253,
103.77625,
103.91998,
104.06371,
104.20743,
104.35115,
104.49488,
104.6386,
104.78233,
104.92605,
105.06978,
105.2135,
105.35722,
105.50095,
105.64468,
105.7884,
105.93213,
106.07585,
106.21957,
106.3633,
106.50703,
106.65075,
106.79447,
106.9382,
107.08192,
107.22565,
107.36937,
107.5131,
107.65682,
107.80054,
107.94427,
108.088,
108.23172,
108.37545,
108.51917,
108.6629,
108.80662,
108.95035,
109.09407,
109.23779,
109.38152,
109.52525,
109.66897,
109.8127,
109.95642,
110.10014,
110.24387,
110.3876,
110.53132,
110.67504,
110.81877,
110.96249,
111.10622,
111.24994,
111.39367,
111.53739,
111.68111,
111.82484,
111.96857,
112.11229,
112.25602,
112.39974,
112.54346,
112.68719,
112.83092,
112.97464,
113.11836,
113.26209,
113.40582,
113.54954,
113.69326,
113.83699,
113.98071,
114.12444,
114.26817,
114.41189,
114.55561,
114.69934,
114.84306,
114.98679,
115.13051,
115.27424,
115.41796,
115.56168,
115.70541,
115.84914,
115.99286,
116.13659,
116.28031,
116.42403,
116.56776,
116.71149,
116.85521,
116.99893,
117.14266,
117.28638,
117.43011,
117.57383,
117.71756,
117.86128,
118.005,
118.14874,
118.29246,
118.43618,
118.57991,
118.72363,
118.86736,
119.01108,
119.15481,
119.29853,
119.44225,
119.58598,
119.72971,
119.87343,
120.01715,
120.16088,
120.3046,
120.44833,
120.59206,
120.73578,
120.8795,
121.02323,
121.16695,
121.31068,
121.4544,
121.59813,
121.74185,
121.88557,
122.0293,
122.17303,
122.31675,
122.46048,
122.6042,
122.74792,
122.89165,
123.03538,
123.1791,
123.32282,
123.46655,
123.61028,
123.754,
123.89772,
124.04145,
124.18517,
124.3289,
124.47263,
124.61635,
124.76007,
124.9038,
125.04752,
125.19125,
125.33497,
125.4787,
125.62242,
125.76614,
125.90987,
126.0536,
126.19732,
126.34105,
126.48477,
126.62849,
126.77222,
126.91595,
127.05967,
127.20339,
127.34712,
127.49084,
127.63457,
127.77829,
127.92202,
128.06575,
128.20947,
128.3532,
128.49692,
128.64064,
128.78436,
128.92809,
129.07182,
129.21555,
129.35927,
129.50299,
129.64671,
129.79044,
129.93416,
130.0779,
130.22162,
130.36534,
130.50906,
130.65279,
130.79651,
130.94023,
131.08397,
131.22769,
131.37141,
131.51514,
131.65886,
131.80258,
131.94632,
132.09004,
132.23376,
132.37749,
132.52121,
132.66493,
132.80865,
132.95239,
133.09612,
133.23984,
133.38356,
133.52728,
133.67101,
133.81473,
133.95847,
134.10219,
134.24591,
134.38963,
134.53336,
134.67708,
134.8208,
134.96454,
135.10826,
135.25198,
135.39571,
135.53943,
135.68315,
135.82689,
135.97061,
136.11433,
136.25806,
136.40178,
136.5455,
136.68922,
136.83296,
136.97668,
137.12041,
137.26413,
137.40785,
137.55157,
137.6953,
137.83904,
137.98276,
138.12648,
138.2702,
138.41393,
138.55765,
138.70137,
138.84511,
138.98883,
139.13255,
139.27628,
139.42,
139.56372,
139.70744,
139.85118,
139.9949,
140.13863,
140.28235,
140.42607,
140.56979,
140.71353,
140.85725,
141.00098,
141.1447,
141.28842,
141.43214,
141.57587,
141.7196,
141.86333,
142.00705,
142.15077,
142.29449,
142.43822,
142.58194,
142.72568,
142.8694,
143.01312,
143.15685,
143.30057,
143.44429,
143.58801,
143.73175,
143.87547,
144.0192,
144.16292,
144.30664,
144.45036,
144.5941,
144.73782,
144.88155,
145.02527,
145.16899,
145.31271,
145.45644,
145.60017,
145.7439,
145.88762,
146.03134,
146.17506,
146.31879,
146.46251,
146.60625,
146.74997,
146.89369,
147.03741,
147.18114,
147.32486,
147.46858,
147.61232,
147.75604,
147.89977,
148.04349,
148.18721,
148.33093,
148.47467,
148.61839,
148.76212,
148.90584,
149.04956,
149.19328,
149.33701,
149.48074,
149.62447,
149.76819,
149.91191,
150.05563,
150.19936,
150.34308,
150.48682,
150.63054,
150.77426,
150.91798,
151.06171,
151.20543,
151.34915,
151.49289,
151.63661,
151.78033,
151.92406,
152.06778,
152.2115,
152.35524,
152.49896,
152.64268,
152.78641,
152.93013,
153.07385,
153.21758,
153.36131,
153.50504,
153.64876,
153.79248,
153.9362,
154.07993,
154.22365,
154.36739,
154.51111,
154.65483,
154.79855,
154.94228,
155.086,
155.22972,
155.37346,
155.51718,
155.6609,
155.80463,
155.94835,
156.09207,
156.23579,
156.37953,
156.52325,
156.66698,
156.8107,
156.95442,
157.09814,
157.24188,
157.3856,
157.52933,
157.67305,
157.81677,
157.96049,
158.10422,
158.24796,
158.39168,
158.5354,
158.67912,
158.82285,
158.96657,
159.11029,
159.25403,
159.39775,
159.54147,
159.6852,
159.82892,
159.97264,
160.11636,
160.2601,
160.40382,
160.54755,
160.69127,
160.83499,
160.97871,
161.12245,
161.26617,
161.4099,
161.55362,
161.69734,
161.84106,
161.98479,
162.12852,
162.27225,
162.41597,
162.55969,
162.70341,
162.84714,
162.99086,
163.1346,
163.27832,
163.42204,
163.56577,
163.70949,
163.85321,
163.99693,
164.14067,
164.28439,
164.42812,
164.57184,
164.71556,
164.85928,
165.00302,
165.14674,
165.29047,
165.43419,
165.57791,
165.72163,
165.86536,
166.00909,
166.15282,
166.29654,
166.44026,
166.58398,
166.72771,
166.87143,
167.01517,
167.15889,
167.30261,
167.44633,
167.59006,
167.73378,
167.8775,
168.02124,
168.16496,
168.30869,
168.45241,
168.59613,
168.73985,
168.88359,
169.02731,
169.17104,
169.31476,
169.45848,
169.6022,
169.74593,
169.88966,
170.03339,
170.17711,
170.32083,
170.46455,
170.60828,
170.752,
170.89574,
171.03946,
171.18318,
171.3269,
171.47063,
171.61435,
171.75807,
171.90181,
172.04553,
172.18925,
172.33298,
172.4767,
172.62042,
172.76414,
172.90788,
173.05161,
173.19533,
173.33905,
173.48277,
173.6265,
173.77023,
173.91396,
174.05768,
174.2014,
174.34512,
174.48885,
174.63257,
174.77631,
174.92003,
175.06375,
175.20747,
175.3512,
175.49492,
175.63864,
175.78238,
175.9261,
176.06982,
176.21355,
176.35727,
176.50099,
176.64471,
176.78845,
176.93217,
177.0759,
177.21962,
177.36334,
177.50706,
177.6508,
177.79453,
177.93825,
178.08197,
178.22569,
178.36942,
178.51314,
178.65688,
178.8006,
178.94432,
179.08804,
179.23177,
179.37549,
179.51921,
179.66295,
179.80667,
179.95039,
-179.90588,
-179.76216,
-179.61844,
-179.47472,
-179.33098,
-179.18726,
-179.04353,
-178.89981,
-178.75609,
-178.61237,
-178.46863,
-178.32491,
-178.18118,
-178.03746,
-177.89374,
-177.75002,
-177.60629,
-177.46255,
-177.31883,
-177.17511,
-177.03139,
-176.88766,
-176.74394,
-176.60022,
-176.45648,
-176.31276,
-176.16904,
-176.02531,
-175.88159,
-175.73787,
-175.59415,
-175.45041,
-175.30669,
-175.16296,
-175.01924,
-174.87552,
-174.7318,
-174.58807,
-174.44434,
-174.30061,
-174.15689,
-174.01317,
-173.86945,
-173.72572,
-173.58199,
-173.43826,
-173.29454,
-173.15082,
-173.0071,
-172.86337,
-172.71965,
-172.57591,
-172.43219,
-172.28847,
-172.14474,
-172.00102,
-171.8573,
-171.71358,
-171.56984,
-171.42612,
-171.28239,
-171.13867,
-170.99495,
-170.85123,
-170.7075,
-170.56377,
-170.42004,
-170.27632,
-170.1326,
-169.98888,
-169.84515,
-169.70142,
-169.55769,
-169.41397,
-169.27025,
-169.12653,
-168.9828,
-168.83908,
-168.69534,
-168.55162,
-168.4079,
-168.26418,
-168.12045,
-167.97673,
-167.83301,
-167.68927,
-167.54555,
-167.40182,
-167.2581,
-167.11438,
-166.97066,
-166.82693,
-166.6832,
-166.53947,
-166.39575,
-166.25203,
-166.10831,
-165.96458,
-165.82085,
-165.67712,
-165.5334,
-165.38968,
-165.24596,
-165.10223,
-164.95851,
-164.81477,
-164.67105,
-164.52733,
-164.38361,
-164.23988,
-164.09616,
-163.95244,
-163.8087,
-163.66498,
-163.52126,
-163.37753,
-163.23381,
-163.09009,
-162.94637,
-162.80263,
-162.65891,
-162.51518,
-162.37146,
-162.22774,
-162.08401,
-161.94028,
-161.79655,
-161.65283,
-161.50911,
-161.36539,
-161.22166,
-161.07794,
-160.9342,
-160.79048,
-160.64676,
-160.50304,
-160.35931,
-160.21559,
-160.07187,
-159.92813,
-159.78441,
-159.64069,
-159.49696,
-159.35324,
-159.20952,
-159.0658,
-158.92206,
-158.77834,
-158.63461,
-158.49089,
-158.34717,
-158.20345,
-158.05972,
-157.91599,
-157.77226,
-157.62854,
-157.48482,
-157.34109,
-157.19737,
-157.05363,
-156.90991,
-156.76619,
-156.62247,
-156.47874,
-156.33502,
-156.1913,
-156.04756,
-155.90384,
-155.76012,
-155.61639,
-155.47267,
-155.32895,
-155.18523,
-155.04149,
-154.89777,
-154.75404,
-154.61032,
-154.4666,
-154.32288,
-154.17915,
-154.03542,
-153.89169,
-153.74797,
-153.60425,
-153.46053,
-153.3168,
-153.17307,
-153.02934,
-152.88562,
-152.7419,
-152.59818,
-152.45445,
-152.31073,
-152.16699,
-152.02327,
-151.87955,
-151.73582,
-151.5921,
-151.44838,
-151.30466,
-151.16092,
-151.0172,
-150.87347,
-150.72975,
-150.58603,
-150.44231,
-150.29858,
-150.15485,
-150.01112,
-149.8674,
-149.72368,
-149.57996,
-149.43623,
-149.2925,
-149.14877,
-149.00505,
-148.86133,
-148.71761,
-148.57388,
-148.43016,
-148.28642,
-148.1427,
-147.99898,
-147.85526,
-147.71153,
-147.56781,
-147.42409,
-147.28035,
-147.13663,
-146.9929,
-146.84918,
-146.70546,
-146.56174,
-146.41801,
-146.27428,
-146.13055,
-145.98683,
-145.84311,
-145.69939,
-145.55566,
-145.41193,
-145.2682,
-145.12448,
-144.98076,
-144.83704,
-144.69331,
-144.54959,
-144.40585,
-144.26213,
-144.11841,
-143.97469,
-143.83096,
-143.68724,
-143.54352,
-143.39978,
-143.25606,
-143.11234,
-142.96861,
-142.82489,
-142.68117,
-142.53745,
-142.39371,
-142.24998,
-142.10626,
-141.96254,
-141.81882,
-141.67509,
-141.53137,
-141.38763,
-141.24391,
-141.10019,
-140.95647,
-140.81274,
-140.66902,
-140.52528,
-140.38156,
-140.23784,
-140.09412,
-139.95039,
-139.80667,
-139.66295,
-139.51921,
-139.37549,
-139.23177,
-139.08804,
-138.94432,
-138.8006,
-138.65688,
-138.51314,
-138.36942,
-138.22569,
-138.08197,
-137.93825,
-137.79453,
-137.6508,
-137.50706,
-137.36334,
-137.21962,
-137.0759,
-136.93217,
-136.78845,
-136.64471,
-136.50099,
-136.35727,
-136.21355,
-136.06982,
-135.9261,
-135.78238,
-135.63864,
-135.49492,
-135.3512,
-135.20747,
-135.06375,
-134.92003,
-134.77631,
-134.63257,
-134.48885,
-134.34512,
-134.2014,
-134.05768,
-133.91396,
-133.77023,
-133.6265,
-133.48277,
-133.33905,
-133.19533,
-133.05161,
-132.90788,
-132.76414,
-132.62042,
-132.4767,
-132.33298,
-132.18925,
-132.04553,
-131.90181,
-131.75807,
-131.61435,
-131.47063,
-131.3269,
-131.18318,
-131.03946,
-130.89574,
-130.752,
-130.60828,
-130.46455,
-130.32083,
-130.17711,
-130.03339,
-129.88966,
-129.74593,
-129.6022,
-129.45848,
-129.31476,
-129.17104,
-129.02731,
-128.88359,
-128.73985,
-128.59613,
-128.45241,
-128.30869,
-128.16496,
-128.02124,
-127.8775,
-127.73378,
-127.59006,
-127.44633,
-127.30261,
-127.15889,
-127.01517,
-126.87143,
-126.72771,
-126.58398,
-126.44026,
-126.29654,
-126.15282,
-126.00909,
-125.86536,
-125.72163,
-125.57791,
-125.43419,
-125.29047,
-125.14674,
-125.00302,
-124.85928,
-124.71556,
-124.57184,
-124.42812,
-124.28439,
-124.14067,
-123.99693,
-123.85321,
-123.70949,
-123.56577,
-123.42204,
-123.27832,
-123.1346,
-122.99086,
-122.84714,
-122.70341,
-122.55969,
-122.41597,
-122.27225,
-122.12852,
-121.98479,
-121.84106,
-121.69734,
-121.55362,
-121.4099,
-121.26617,
-121.12245,
-120.97871,
-120.83499,
-120.69127,
-120.54755,
-120.40382,
-120.2601,
-120.11636,
-119.97264,
-119.82892,
-119.6852,
-119.54147,
-119.39775,
-119.25403,
-119.11029,
-118.96657,
-118.82285,
-118.67912,
-118.5354,
-118.39168,
-118.24796,
-118.10422,
-117.96049,
-117.81677,
-117.67305,
-117.52933,
-117.3856,
-117.24188,
-117.09814,
-116.95442,
-116.8107,
-116.66698,
-116.52325,
-116.37953,
-116.23579,
-116.09207,
-115.94835,
-115.80463,
-115.6609,
-115.51718,
-115.37346,
-115.22972,
-115.086,
-114.94228,
-114.79855,
-114.65483,
-114.51111,
-114.36739,
-114.22365,
-114.07993,
-113.9362,
-113.79248,
-113.64876,
-113.50504,
-113.36131,
-113.21758,
-113.07385,
-112.93013,
-112.78641,
-112.64268,
-112.49896,
-112.35524,
-112.2115,
-112.06778,
-111.92406,
-111.78033,
-111.63661,
-111.49289,
-111.34915,
-111.20543,
-111.06171,
-110.91798,
-110.77426,
-110.63054,
-110.48682,
-110.34308,
-110.19936,
-110.05563,
-109.91191,
-109.76819,
-109.62447,
-109.48074,
-109.33701,
-109.19328,
-109.04956,
-108.90584,
-108.76212,
-108.61839,
-108.47467,
-108.33093,
-108.18721,
-108.04349,
-107.89977,
-107.75604,
-107.61232,
-107.46858,
-107.32486,
-107.18114,
-107.03741,
-106.89369,
-106.74997,
-106.60625,
-106.46251,
-106.31879,
-106.17506,
-106.03134,
-105.88762,
-105.7439,
-105.60017,
-105.45644,
-105.31271,
-105.16899,
-105.02527,
-104.88155,
-104.73782,
-104.5941,
-104.45036,
-104.30664,
-104.16292,
-104.0192,
-103.87546,
-103.73175,
-103.58801,
-103.44431,
-103.30057,
-103.15686,
-103.01312,
-102.86938,
-102.72568,
-102.58194,
-102.43823,
-102.29449,
-102.15079,
-102.00705,
-101.86331,
-101.7196,
-101.57587,
-101.43216,
-101.28842,
-101.14468,
-101.00098,
-100.85724,
-100.71353,
-100.56979,
-100.42609,
-100.28235,
-100.13861,
-99.9949,
-99.85117,
-99.70746,
-99.56372,
-99.42001,
-99.27628,
-99.13254,
-98.98883,
-98.84509,
-98.70139,
-98.55765,
-98.41394,
-98.2702,
-98.12646,
-97.98276,
-97.83902,
-97.69531,
-97.55157,
-97.40787,
-97.26413,
-97.12039,
-96.97668,
-96.83295,
-96.68924,
-96.5455,
-96.40179,
-96.25806,
-96.11432,
-95.97061,
-95.82687,
-95.68317,
-95.53943,
-95.39572,
-95.25198,
-95.10825,
-94.96454,
-94.8208,
-94.67709,
-94.53336,
-94.38965,
-94.24591,
-94.10217,
-93.95847,
-93.81473,
-93.67102,
-93.52728,
-93.38354,
-93.23984,
-93.0961,
-92.95239,
-92.80865,
-92.66495,
-92.52121,
-92.37747,
-92.23376,
-92.09003,
-91.94632,
-91.80258,
-91.65887,
-91.51514,
-91.3714,
-91.22769,
-91.08395,
-90.94025,
-90.79651,
-90.6528,
-90.50906,
-90.36533,
-90.22162,
-90.07788,
-89.93417,
-89.79044,
-89.64673,
-89.50299,
-89.35925,
-89.21555,
-89.07181,
-88.9281,
-88.78436,
-88.64066,
-88.49692,
-88.35318,
-88.20947,
-88.06573,
-87.92203,
-87.77829,
-87.63458,
-87.49084,
-87.34711,
-87.2034,
-87.05966,
-86.91595,
-86.77222,
-86.62851,
-86.48477,
-86.34103,
-86.19733,
-86.05359,
-85.90988,
-85.76614,
-85.62244,
-85.4787,
-85.33496,
-85.19125,
-85.04752,
-84.90381,
-84.76007,
-84.61633,
-84.47263,
-84.32889,
-84.18518,
-84.04144,
-83.89774,
-83.754,
-83.61026,
-83.46655,
-83.32281,
-83.17911,
-83.03537,
-82.89166,
-82.74792,
-82.60419,
-82.46048,
-82.31674,
-82.17303,
-82.0293,
-81.88559,
-81.74185,
-81.59811,
-81.45441,
-81.31067,
-81.16696,
-81.02322,
-80.87952,
-80.73578,
-80.59204,
-80.44833,
-80.3046,
-80.16089,
-80.01715,
-79.87344,
-79.72971,
-79.58597,
-79.44226,
-79.29852,
-79.15482,
-79.01108,
-78.86737,
-78.72363,
-78.5799,
-78.43619,
-78.29245,
-78.14874,
-78.005,
-77.8613,
-77.71756,
-77.57382,
-77.43011,
-77.28638,
-77.14267,
-76.99893,
-76.85519,
-76.71149,
-76.56775,
-76.42404,
-76.2803,
-76.1366,
-75.99286,
-75.84912,
-75.70541,
-75.56168,
-75.41797,
-75.27423,
-75.13052,
-74.98679,
-74.84305,
-74.69934,
-74.5556,
-74.4119,
-74.26816,
-74.12445,
-73.98071,
-73.83698,
-73.69327,
-73.54953,
-73.40582,
-73.26208,
-73.11838,
-72.97464,
-72.8309,
-72.68719,
-72.54346,
-72.39975,
-72.25601,
-72.1123,
-71.96857,
-71.82483,
-71.68112,
-71.53738,
-71.39368,
-71.24994,
-71.10623,
-70.96249,
-70.81876,
-70.67505,
-70.53131,
-70.3876,
-70.24387,
-70.10016,
-69.95642,
-69.81268,
-69.66898,
-69.52524,
-69.38153,
-69.23779,
-69.09409,
-68.95035,
-68.80661,
-68.6629,
-68.51917,
-68.37546,
-68.23172,
-68.08798,
-67.94427,
-67.80054,
-67.65683,
-67.51309,
-67.36938,
-67.22565,
-67.08191,
-66.9382,
-66.79446,
-66.65076,
-66.50702,
-66.36331,
-66.21957,
-66.07584,
-65.93213,
-65.78839,
-65.64468,
-65.50095,
-65.35724,
-65.2135,
-65.06976,
-64.92606,
-64.78232,
-64.63861,
-64.49487,
-64.35117,
-64.20743,
-64.06369,
-63.91998,
-63.77625,
-63.63254,
-63.4888,
-63.34509,
-63.20135,
-63.05762,
-62.91391,
-62.77017,
-62.62646,
-62.48273,
-62.33902,
-62.19528,
-62.05154,
-61.90784,
-61.7641,
-61.62039,
-61.47665,
-61.33295,
-61.18921,
-61.04547,
-60.90176,
-60.75803,
-60.61432,
-60.47058,
-60.32687,
-60.18314,
-60.0394,
-59.89569,
-59.75195,
-59.60825,
-59.46451,
-59.32077,
-59.17706,
-59.03333,
-58.88962,
-58.74588,
-58.60217,
-58.45844,
-58.3147,
-58.17099,
-58.02725,
-57.88354,
-57.73981,
-57.5961,
-57.45236,
-57.30862,
-57.16492,
-57.02118,
-56.87747,
-56.73373,
-56.59003,
-56.44629,
-56.30255,
-56.15884,
-56.01511,
-55.8714,
-55.72766,
-55.58395,
-55.44022,
-55.29648,
-55.15277,
-55.00903,
-54.86533,
-54.72159,
-54.57788,
-54.43414,
-54.29041,
-54.1467,
-54.00296,
-53.85925,
-53.71552,
-53.57181,
-53.42807,
-53.28433,
-53.14062,
-52.99689,
-52.85318,
-52.70944,
-52.56573,
-52.422,
-52.27826,
-52.13455,
-51.99081,
-51.84711,
-51.70337,
-51.55963,
-51.41592,
-51.27219,
-51.12848,
-50.98474,
-50.84103,
-50.6973,
-50.55356,
-50.40985,
-50.26611,
-50.12241,
-49.97867,
-49.83496,
-49.69122,
-49.54749,
-49.40378,
-49.26004,
-49.11633,
-48.9726,
-48.82889,
-48.68515,
-48.54141,
-48.39771,
-48.25397,
-48.11026,
-47.96652,
-47.82281,
-47.67908,
-47.53534,
-47.39163,
-47.24789,
-47.10419,
-46.96045,
-46.81674,
-46.673,
-46.52927,
-46.38556,
-46.24182,
-46.09811,
-45.95438,
-45.81067,
-45.66693,
-45.52319,
-45.37949,
-45.23575,
-45.09204,
-44.9483,
-44.8046,
-44.66086,
-44.51712,
-44.37341,
-44.22968,
-44.08597,
-43.94223,
-43.79852,
-43.65479,
-43.51105,
-43.36734,
-43.2236,
-43.0799,
-42.93616,
-42.79242,
-42.64871,
-42.50497,
-42.36127,
-42.21753,
-42.07382,
-41.93008,
-41.78635,
-41.64264,
-41.4989,
-41.35519,
-41.21146,
-41.06775,
-40.92401,
-40.78027,
-40.63657,
-40.49283,
-40.34912,
-40.20538,
-40.06168,
-39.91794,
-39.7742,
-39.63049,
-39.48676,
-39.34305,
-39.19931,
-39.0556,
-38.91187,
-38.76813,
-38.62442,
-38.48068,
-38.33698,
-38.19324,
-38.04953,
-37.90579,
-37.76205,
-37.61835,
-37.47461,
-37.3309,
-37.18716,
-37.04346,
-36.89972,
-36.75598,
-36.61227,
-36.46854,
-36.32483,
-36.18109,
-36.03738,
-35.89365,
-35.74991,
-35.6062,
-35.46246,
-35.31876,
-35.17502,
-35.03128,
-34.88757,
-34.74384,
-34.60013,
-34.45639,
-34.31268,
-34.16895,
-34.02521,
-33.8815,
-33.73776,
-33.59406,
-33.45032,
-33.30661,
-33.16287,
-33.01913,
-32.87543,
-32.73169,
-32.58798,
-32.44424,
-32.30054,
-32.1568,
-32.01306,
-31.86935,
-31.72562,
-31.58191,
-31.43817,
-31.29446,
-31.15073,
-31.00699,
-30.86328,
-30.71954,
-30.57584,
-30.4321,
-30.28839,
-30.14465,
-30.00092,
-29.85721,
-29.71347,
-29.56976,
-29.42603,
-29.28232,
-29.13858,
-28.99484,
-28.85114,
-28.7074,
-28.56369,
-28.41995,
-28.27625,
-28.13251,
-27.98877,
-27.84506,
-27.70132,
-27.55762,
-27.41388,
-27.27017,
-27.12643,
-26.9827,
-26.83899,
-26.69525,
-26.55154,
-26.40781,
-26.26407,
-26.12036,
-25.97662,
-25.83292,
-25.68918,
-25.54547,
-25.40173,
-25.258,
-25.11429,
-24.97055,
-24.82684,
-24.68311,
-24.5394,
-24.39566,
-24.25192,
-24.10822,
-23.96448,
-23.82077,
-23.67703,
-23.53333,
-23.38959,
-23.24585,
-23.10214,
-22.9584,
-22.8147,
-22.67096,
-22.52725,
-22.38351,
-22.23978,
-22.09607,
-21.95233,
-21.80862,
-21.66489,
-21.52118,
-21.37744,
-21.2337,
-21.09,
-20.94626,
-20.80255,
-20.65881,
-20.51511,
-20.37137,
-20.22763,
-20.08392,
-19.94019,
-19.79648,
-19.65274,
-19.50903,
-19.3653,
-19.22156,
-19.07785,
-18.93411,
-18.79041,
-18.64667,
-18.50293,
-18.35922,
-18.21548,
-18.07178,
-17.92804,
-17.78433,
-17.64059,
-17.49686,
-17.35315,
-17.20941,
-17.0657,
-16.92197,
-16.77826,
-16.63452,
-16.49078,
-16.34708,
-16.20334,
-16.05963,
-15.91589,
-15.77219,
-15.62845,
-15.48471,
-15.341,
-15.19727,
-15.05356,
-14.90982,
-14.76611,
-14.62238,
-14.47864,
-14.33493,
-14.19119,
-14.04749,
-13.90375,
-13.76004,
-13.6163,
-13.47256,
-13.32886,
-13.18512,
-13.04141,
-12.89767,
-12.75397,
-12.61023,
-12.46649,
-12.32278,
-12.17905,
-12.03534,
-11.8916,
-11.74789,
-11.60416,
-11.46042,
-11.31671,
-11.17297,
-11.02927,
-10.88553,
-10.74182,
-10.59808,
-10.45435,
-10.31064,
-10.1669,
-10.02319,
-9.87946,
-9.73572,
-9.59201,
-9.44827,
-9.30457,
-9.16083,
-9.01712,
-8.87338,
-8.72964,
-8.58594,
-8.4422,
-8.29849,
-8.15475,
-8.01105,
-7.86731,
-7.72357,
-7.57986,
-7.43613,
-7.29242,
-7.14868,
-7.00497,
-6.86124,
-6.7175,
-6.57379,
-6.43005,
-6.28635,
-6.14261,
-5.9989,
-5.85516,
-5.71143,
-5.56772,
-5.42398,
-5.28027,
-5.13654,
-4.99283,
-4.84909,
-4.70535,
-4.56165,
-4.41791,
-4.2742,
-4.13046,
-3.98676,
-3.84302,
-3.69928,
-3.55557,
-3.41183,
-3.26813,
-3.12439,
-2.98068,
-2.83694,
-2.69321,
-2.5495,
-2.40576,
-2.26205,
-2.11832,
-1.97458,
-1.83087,
-1.68713,
-1.54343,
-1.39969,
-1.25598,
-1.11224,
-0.96851,
-0.8248,
-0.68106,
-0.53735,
-0.39362,
-0.24991,
-0.10617,
0.03757,
0.18127,
0.32501,
0.46872,
0.61246,
0.75616,
0.8999,
1.04364,
1.18735,
1.33109,
1.47479,
1.61853,
1.76224,
1.90598,
2.04971,
2.19342,
2.33716,
2.48087,
2.6246,
2.76831,
2.91205,
3.05579,
3.19949,
3.34323,
3.48694,
3.63068,
3.77438,
3.91812,
4.06186,
4.20557,
4.3493,
4.49301,
4.63675,
4.78046,
4.92419,
5.06793,
5.21164,
5.35538,
5.49908,
5.64282,
5.78653,
5.93027,
6.07401,
6.21771,
6.36145,
6.50516,
6.6489,
6.79263,
6.93634,
7.08008,
7.22379,
7.36752,
7.51123,
7.65497,
7.79871,
7.94241,
8.08615,
8.22986,
8.3736,
8.5173,
8.66104,
8.80478,
8.94849,
9.09222,
9.23593,
9.37967,
9.52338,
9.66711,
9.81085,
9.95456,
10.0983,
10.242,
10.38574,
10.52945,
10.67319,
10.81693,
10.96063,
11.10437,
11.24808,
11.39182,
11.53552,
11.67926,
11.823,
11.96671,
12.11044,
12.25415,
12.39789,
12.5416,
12.68533,
12.82907,
12.97278,
13.11652,
13.26022,
13.40396,
13.54767,
13.69141,
13.83514,
13.97885,
14.12259,
14.2663,
14.41003,
14.55377,
14.69748,
14.84122,
14.98492,
15.12866,
15.27237,
15.41611,
15.55984,
15.70355,
15.84729,
15.991,
16.13474,
16.27844,
16.42218,
16.56592,
16.70963,
16.85336,
16.99707,
17.14081,
17.28452,
17.42825,
17.57199,
17.7157,
17.85944,
18.00314,
18.14688,
18.29059,
18.43433,
18.57806,
18.72177,
18.86551,
19.00922,
19.15295,
19.29666,
19.4404,
19.58414]

# Get the lons
lons = np.asarray(lon)

#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------

# Defining the plot extent:
extent = [float(sys.argv[2]), float(sys.argv[3]), float(sys.argv[4]), float(sys.argv[5])]
original_extent = extent

# Define KM_PER_DEGREE
KM_PER_DEGREE = 111.32

# Calculate the total number of degrees in lat and lon
deg_lon = extent[2] - extent[0]
deg_lat = extent[3] - extent[1]

# Calculate the number of pixels
resolution = int(sys.argv[6])
width = (KM_PER_DEGREE * deg_lon) /  resolution
height = (KM_PER_DEGREE * deg_lat) /  resolution

# Latitude lower and upper index:
latli = np.argmin( np.abs( lats - extent[1] ) )
latui = np.argmin( np.abs( lats - extent[3] ) )
 
if (extent[2] > 20):
   # Longitude lower and upper index:
   lonli = np.argmin( np.abs( lons - extent[0] ) )
   lonui = np.argmin( np.abs( extent[2] - lons ) )
   data1 = data[latui:latli , lonli:2499]
   data2 = data[latui:latli , 0:lonui]
   data = np.hstack((data1, data2))
else:
   # Longitude lower and upper index:
   lonli = np.argmin( np.abs( lons - extent[0] ) )
   lonui = np.argmin( np.abs( lons - extent[2] ) )
   data = data[latui:latli , lonli:lonui]

# Create the satellite output directory if it doesn't exist
out_dir = (sys.argv[7]) + satellite
if not os.path.exists(out_dir):
   os.mkdir(out_dir)

# Create the product output directory if it doesn't exist
out_dir = (sys.argv[7]) + satellite + '//' + storage + '//'
if not os.path.exists(out_dir):
   os.mkdir(out_dir)

#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------

from pyproj import Proj, transform

inProj = Proj(init='epsg:4326')
outProj = Proj(init='epsg:3857')
x1,y1 = (extent[0], extent[1])
x2,y2 = (extent[2], extent[3])
a , b = transform(inProj,outProj,x1,y1)
c , d = transform(inProj,outProj,x2,y2)
extent = [a,b,c,d]

#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------

# Get GDAL driver GeoTiff
driver = gdal.GetDriverByName('GTiff')

# Get dimensions
nlines = data.shape[0]
ncols = data.shape[1]
nbands = len(data.shape)
data_type = gdal.GDT_Float32

# Create grid
grid = driver.Create(out_dir + nomenclature + "_" + date, ncols, nlines, 1, data_type)#, options)

# Write data for each bands
grid.GetRasterBand(1).WriteArray(data)

# Lat/Lon WSG84 Spatial Reference System
srs = osr.SpatialReference()
srs.ImportFromProj4('+proj=merc +lat_ts=0 +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs')

# Setup projection and geo-transform
grid.SetProjection(srs.ExportToWkt())
grid.SetGeoTransform(getGeoTransform(extent, nlines, ncols))

# Save the file
driver.CreateCopy(out_dir + nomenclature + "MERCATOR_" + date + '.tif', grid, 0)

print('Generated GeoTIFF: ', nomenclature + "_" + date + '.tif')
ds = gdal.Warp(out_dir + nomenclature + "_" + date + '.tif', out_dir + nomenclature + "MERCATOR_" + date + '.tif', srcSRS='EPSG:3857', dstSRS='EPSG:4326', outputType=gdal.GDT_Float32, srcNodata=-1, width = width, height = height)

# Close the files
ds = None
grid = None
driver = None

# Delete the grid
os.remove(out_dir + nomenclature + "_" + date)

# Check if there are valid pixels in the region of interest
geotiff = gdal.Open(out_dir + nomenclature + "_" + date + '.tif')
band = geotiff.GetRasterBand(1)
data = band.ReadAsArray()
data = data.astype(float)
data[data == min(data[0])] = np.nan
       
#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------

# Define the multiplication factor (so low res images don't have small plots)
factor = 10

# Plot configuration
plot_config = {
"resolution": resolution, 
"dpi": 150, 
"states_color": 'white', "states_width": data.shape[0] * factor * 0.00024, 
"countries_color": 'white', "countries_width": data.shape[0] * factor * 0.00036,
"continents_color": 'white', "continents_width": data.shape[0] * factor * 0.00050,
"grid_color": 'white', "grid_width": data.shape[0] * factor * 0.00025, "grid_interval": 10.0,
"vmin": vmin, "vmax": vmax, "cmap": cmap,
"title_text": "CIRA " + prod_title + " ", "title_size": int(data.shape[1] * factor * 0.0065), "title_x_offset": int(data.shape[1] * factor * 0.01), "title_y_offset": data.shape[0] * factor - int(data.shape[0] * factor * 0.02), 
"thick_interval": thick_interval, "cbar_labelsize": int(data.shape[0] * factor * 0.005), "cbar_labelpad": -int(data.shape[0] * factor * 0.0),
"file_name_id_1": "JPS",  "file_name_id_2": product + "_SEC"
}
#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------
# Choose the plot size (width x height, in inches)
fig = plt.figure(figsize=(data.shape[1] * factor/float(plot_config["dpi"]), data.shape[0] * factor/float(plot_config["dpi"])), dpi=plot_config["dpi"])

# Define the projection
proj = ccrs.PlateCarree()

# Use the PlateCarree projection in cartopy
ax = plt.axes([0, 0, 1, 1], projection=proj)
ax.set_extent([original_extent[0], original_extent[2], original_extent[1], original_extent[3]], ccrs.PlateCarree())

# Define the image extent
img_extent = [original_extent[0], original_extent[2], original_extent[1], original_extent[3]]

# Add a background image
import cartopy.feature as cfeature
land = ax.add_feature(cfeature.LAND, facecolor='black', zorder=1)
ocean = ax.add_feature(cfeature.OCEAN, facecolor='black', zorder=1)

# Plot the image
img = ax.imshow(data, vmin=plot_config["vmin"], vmax=plot_config["vmax"], origin='upper', extent=img_extent, cmap=plot_config["cmap"], zorder=3)

# To put colorbar inside picture
axins1 = inset_axes(ax, width="100%", height="1%", loc='lower center', borderpad=0.0)
  
# Add states and provinces
shapefile = list(shpreader.Reader(main_dir + '//Shapefiles//ne_10m_admin_1_states_provinces.shp').geometries())
ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor=plot_config["states_color"],facecolor='none', linewidth=plot_config["states_width"], zorder=4)

# Add countries
shapefile = list(shpreader.Reader(main_dir + '//Shapefiles//ne_50m_admin_0_countries.shp').geometries())
ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor=plot_config["countries_color"],facecolor='none', linewidth=plot_config["countries_width"], zorder=5)

# Add continents
shapefile = list(shpreader.Reader(main_dir + '//Shapefiles//ne_10m_coastline.shp').geometries())
ax.add_geometries(shapefile, ccrs.PlateCarree(), edgecolor=plot_config["continents_color"],facecolor='none', linewidth=plot_config["continents_width"], zorder=6)
  
# Add coastlines, borders and gridlines
gl = ax.gridlines(color=plot_config["grid_color"], alpha=0.5, linestyle='--', linewidth=plot_config["grid_width"], xlocs=np.arange(-180, 180, plot_config["grid_interval"]), ylocs=np.arange(-180, 180, plot_config["grid_interval"]), draw_labels=True, zorder=7)
gl.left_labels = True; gl.right_labels = False; gl.top_labels = True; gl.bottom_labels = False
gl.xpadding = -plot_config["cbar_labelsize"]; gl.ypadding = -plot_config["cbar_labelsize"]
gl.ylabel_style = {'color': 'white', 'size': plot_config["cbar_labelsize"], 'weight': 'bold'}
gl.xlabel_style = {'color': 'white', 'size': plot_config["cbar_labelsize"], 'weight': 'bold'}

# Remove the outline border
ax.outline_patch.set_visible(False)
  
# Add a title
plt.annotate(plot_config["title_text"] + " - Advected to " + date_formated, xy=(plot_config["title_x_offset"], plot_config["title_y_offset"]), xycoords='figure pixels', fontsize=plot_config["title_size"], fontweight='bold', color='white', bbox=dict(boxstyle="round",fc=(0.0, 0.0, 0.0), ec=(1., 1., 1.)), zorder=8)
#plt.annotate(plot_config["title_text"] + " - Advected to " + date_formated + " @ " + created, xy=(plot_config["title_x_offset"], plot_config["title_y_offset"]), xycoords='figure pixels', fontsize=plot_config["title_size"], fontweight='bold', color='white', bbox=dict(boxstyle="round",fc=(0.0, 0.0, 0.0), ec=(1., 1., 1.)), zorder=8)

# Add the level
if(level == '850'):
    plt.annotate("Sfc - 850 mb", xy=(int(data.shape[1] * factor * 0.02), data.shape[0] * factor - int(data.shape[0] * factor * 0.06)), xycoords='figure pixels', fontsize=plot_config["title_size"] * 2, fontweight='bold', color='gold', bbox=dict(boxstyle="round",fc=(0.0, 0.0, 0.0, 0.5), ec=(1., 1., 1.)), zorder=8)
elif(level == '700'):
    plt.annotate("850 - 700 mb", xy=(int(data.shape[1] * factor * 0.02), data.shape[0] * factor - int(data.shape[0] * factor * 0.06)), xycoords='figure pixels', fontsize=plot_config["title_size"] * 2, fontweight='bold', color='gold', bbox=dict(boxstyle="round",fc=(0.0, 0.0, 0.0, 0.5), ec=(1., 1., 1.)), zorder=8)
elif(level == '500'):
    plt.annotate("700 - 500 mb", xy=(int(data.shape[1] * factor * 0.02), data.shape[0] * factor - int(data.shape[0] * factor * 0.06)), xycoords='figure pixels', fontsize=plot_config["title_size"] * 2, fontweight='bold', color='gold', bbox=dict(boxstyle="round",fc=(0.0, 0.0, 0.0, 0.5), ec=(1., 1., 1.)), zorder=8)
elif(level == '300'):
    plt.annotate("500 - 300 mb", xy=(int(data.shape[1] * factor * 0.02), data.shape[0] * factor - int(data.shape[0] * factor * 0.06)), xycoords='figure pixels', fontsize=plot_config["title_size"] * 2, fontweight='bold', color='gold', bbox=dict(boxstyle="round",fc=(0.0, 0.0, 0.0, 0.5), ec=(1., 1., 1.)), zorder=8)   

#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------
# Add labels to specific coordinates
'''
import configparser
conf = configparser.ConfigParser()
conf.read(main_dir + '//Utils//Labels//labels_g16.ini')

labels, city_lons, city_lats, x_offsets, y_offsets, sizes, colors, marker_types, marker_colors, marker_sizes = [],[],[],[],[],[],[],[],[],[]

for each_section in conf.sections():
  for (each_key, each_val) in conf.items(each_section):
      if (each_key == 'label'): labels.append(each_val)
      if (each_key == 'lon'): city_lons.append(float(each_val))
      if (each_key == 'lat'): city_lats.append(float(each_val))
      if (each_key == 'x_offset'): x_offsets.append(float(each_val))
      if (each_key == 'y_offset'): y_offsets.append(float(each_val))
      if (each_key == 'size'): sizes.append(int(each_val))
      if (each_key == 'color'): colors.append(each_val)
      if (each_key == 'marker_type'): marker_types.append(each_val)
      if (each_key == 'marker_color'): marker_colors.append(each_val)
      if (each_key == 'marker_size'): marker_sizes.append(each_val)
 
import matplotlib.patheffects as PathEffects
for label, xpt, ypt, x_offset, y_offset, size, col, mtype, mcolor, msize in zip(labels, city_lons, city_lats, x_offsets, y_offsets, sizes, colors, marker_types, marker_colors, marker_sizes):
  ax.plot(xpt, ypt, str(mtype), color=str(mcolor), markersize=int(msize), transform=ccrs.Geodetic(), markeredgewidth=1.0, markeredgecolor=(0, 0, 0, 1), zorder=10)
  txt = ax.text(xpt+x_offset , ypt+y_offset, label, fontsize=int(size), fontweight='bold', color=str(col), transform=ccrs.Geodetic(), zorder=11)
  txt.set_path_effects([PathEffects.withStroke(linewidth=2, foreground='black')])
'''
#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------

# Add logos / images to the plot
my_logo = plt.imread(main_dir + '//Logos//my_logo.png')
newax = fig.add_axes([0.01, 0.03, 0.10, 0.10], anchor='SW', zorder=12) #  [left, bottom, width, height]. All quantities are in fractions of figure width and height.
newax.imshow(my_logo)
newax.axis('off')

# Add a colorbar
ticks = np.arange(plot_config["vmin"], plot_config["vmax"], plot_config["thick_interval"]).tolist()     
ticks = plot_config["thick_interval"] * np.round(np.true_divide(ticks,plot_config["thick_interval"]))
ticks = ticks[1:]
cb = fig.colorbar(img, cax=axins1, orientation="horizontal", ticks=ticks)
cb.set_label(label='Advected Layered Precipitable Water (mm)', color='lightgray', size=plot_config["title_size"] , weight='bold')
cb.outline.set_visible(False)
cb.ax.tick_params(width = 0)
cb.ax.xaxis.set_tick_params(pad=plot_config["cbar_labelpad"])
cb.ax.xaxis.set_ticks_position('top')
cb.ax.xaxis.set_label_position('top')
cb.ax.tick_params(axis='x', colors='lightgray', labelsize=plot_config["cbar_labelsize"])

#---------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------   
       
product = product + "_SEC"
          
# Create the satellite output directory if it doesn't exist
out_dir = (sys.argv[7]) + satellite
if not os.path.exists(out_dir):
  os.mkdir(out_dir)

# Create the product output directory if it doesn't exist
out_dir = (sys.argv[7]) + satellite + '//' + product + '//'
if not os.path.exists(out_dir):
  os.mkdir(out_dir)
                     
# Save the image
plt.savefig(out_dir + plot_config["file_name_id_1"] + "_" + plot_config["file_name_id_2"] + "_" + date_file + '.png', facecolor='black')

# Convert to webp
from PIL.WebPImagePlugin import Image          
im = Image.open(out_dir + plot_config["file_name_id_1"] + "_" + plot_config["file_name_id_2"] + "_" + date_file + '.png')
im.save(out_dir + plot_config["file_name_id_1"] + "_" + plot_config["file_name_id_2"] + "_" + date_file + '.webp', format = "WebP", lossless = True)
im.close()

# Update the animation
nfiles = 20
update(satellite, product, nfiles, sys.argv[7], sys.argv[8])

# Delete aux files
os.remove(out_dir + plot_config["file_name_id_1"] + "_" + plot_config["file_name_id_2"] + "_" + date_file + '.png')  
 
#---------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------
# Put the processed file on the log
import datetime # Basic Date and Time types
with open(main_dir + '//Logs//gnc_log_' + str(datetime.datetime.now())[0:10] + '.txt', 'a') as log:
 log.write(str(datetime.datetime.now()))
 log.write('\n')
 log.write(path_log + '\n')
 log.write('\n')
#---------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------

print('Total processing time:', round((t.time() - start_time),2), 'seconds.') 
